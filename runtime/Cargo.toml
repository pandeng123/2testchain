[package]
name = "solochain-template-runtime"
description = "A solochain runtime template built with Substrate, part of Polkadot Sdk."
version = "0.1.0"
license = "Unlicense"
authors.workspace = true
homepage.workspace = true
repository.workspace = true
edition.workspace = true
publish = false

[package.metadata.docs.rs]
targets = ["x86_64-unknown-linux-gnu"]

[dependencies]
codec = { features = [
	"derive",
], workspace = true }
scale-info = { features = [
	"derive",
	"serde",
], workspace = true }
log = { workspace = true }
static_assertions = "1.1"

# Substrate FRAME
frame-support = { features = ["experimental"], workspace = true }
frame-system.workspace = true
frame-try-runtime = { optional = true, workspace = true }
frame-executive.workspace = true
frame-metadata-hash-extension.workspace = true
frame-benchmarking = { optional = true, workspace = true }
frame-system-benchmarking = { optional = true, workspace = true }
frame-system-rpc-runtime-api.workspace = true
pallet-balances.workspace = true
pallet-grandpa.workspace = true
pallet-sudo.workspace = true
pallet-timestamp.workspace = true
pallet-transaction-payment.workspace = true
pallet-transaction-payment-rpc-runtime-api.workspace = true

frame-election-provider-support = { workspace = true }
pallet-authorship = { workspace = true }
pallet-babe = { workspace = true }
pallet-bags-list = { workspace = true }
pallet-collective = { workspace = true }
pallet-contracts = { workspace = true }
pallet-democracy = { workspace = true }
pallet-election-provider-multi-phase = { workspace = true }
pallet-elections-phragmen = { workspace = true }
pallet-im-online = { workspace = true }
pallet-insecure-randomness-collective-flip = { workspace = true }
pallet-membership = { workspace = true }
pallet-nomination-pools = { workspace = true }
pallet-nomination-pools-runtime-api = { workspace = true }
pallet-offences = { workspace = true }
pallet-offences-benchmarking = { workspace = true, optional = true }
pallet-preimage = { workspace = true }
pallet-scheduler = { workspace = true }
pallet-session = { workspace = true }
pallet-staking = { workspace = true }
pallet-staking-reward-curve = { workspace = true }
pallet-staking-runtime-api = { workspace = true }
pallet-treasury = { workspace = true }
pallet-utility = { workspace = true }
pallet-fast-unstake = { workspace = true }

# Local Pallet
pallet-template.workspace = true

# Substrate Primitive
sp-api.workspace = true
sp-block-builder.workspace = true
sp-consensus-grandpa = { features = ["serde"], workspace = true }
sp-core = { features = ["serde"], workspace = true }
sp-inherents.workspace = true
sp-offchain.workspace = true
sp-runtime = { features = ["serde"], workspace = true }
sp-session.workspace = true
sp-storage.workspace = true
sp-transaction-pool.workspace = true
sp-version = { features = ["serde"], workspace = true }
sp-genesis-builder.workspace = true
sp-consensus-babe = { workspace = true }

sp-io = { workspace = true }
sp-staking = { workspace = true }
sp-std = { workspace = true }
sp-statement-store = { workspace = true }

# Frontier
fp-account = { workspace = true, features = ["serde"] }
fp-evm = { workspace = true, features = ["serde"] }
fp-rpc = { workspace = true }
fp-self-contained = { workspace = true, features = ["serde"] }
# Frontier FRAME
pallet-base-fee = { workspace = true }
pallet-dynamic-fee = { workspace = true }
pallet-ethereum = { workspace = true }
pallet-evm = { workspace = true }
pallet-evm-chain-id = { workspace = true }
pallet-evm-precompile-modexp = { workspace = true }
pallet-evm-precompile-sha3fips = { workspace = true }
pallet-evm-precompile-simple = { workspace = true }
pallet-evm-precompile-dispatch = { workspace = true }

[build-dependencies]
substrate-wasm-builder = { optional = true, workspace = true, default-features = true }

[features]
default = ["std"]
std = [
	"codec/std",
	"scale-info/std",

	# Substrate FRAME
	"frame-executive/std",
	"frame-metadata-hash-extension/std",
	"frame-support/std",
	"frame-system-benchmarking?/std",
	"frame-system-rpc-runtime-api/std",
	"frame-system/std",
	"frame-benchmarking?/std",
	"frame-try-runtime?/std",

	"pallet-balances/std",
	"pallet-grandpa/std",
	"pallet-sudo/std",
	"pallet-template/std",
	"pallet-timestamp/std",
	"pallet-transaction-payment-rpc-runtime-api/std",
	"pallet-transaction-payment/std",

	"frame-election-provider-support/std",
	"pallet-authorship/std",
	"pallet-babe/std",
	"pallet-bags-list/std",
	"pallet-collective/std",
	"pallet-contracts/std",
	"pallet-democracy/std",
	"pallet-election-provider-multi-phase/std",
	"pallet-elections-phragmen/std",
	"pallet-im-online/std",
	"pallet-insecure-randomness-collective-flip/std",
	"pallet-membership/std",
	"pallet-nomination-pools/std",
	"pallet-nomination-pools-runtime-api/std",
	"pallet-offences/std",
	"pallet-offences-benchmarking/std",
	"pallet-preimage/std",
	"pallet-scheduler/std",
	"pallet-session/std",
	"pallet-staking/std",
	"pallet-staking-runtime-api/std",
	"pallet-treasury/std",
	"pallet-utility/std",
	"pallet-fast-unstake/std",

	# Substrate Primitive
	"sp-api/std",
	"sp-block-builder/std",
	"sp-consensus-grandpa/std",
	"sp-core/std",
	"sp-genesis-builder/std",
	"sp-inherents/std",
	"sp-offchain/std",
	"sp-runtime/std",
	"sp-session/std",
	"sp-storage/std",
	"sp-transaction-pool/std",
	"sp-version/std",
	"sp-consensus-babe/std",

	"sp-io/std",
	"sp-staking/std",
	"sp-std/std",
	"sp-statement-store/std",

	"substrate-wasm-builder",

	# Frontier
    "fp-account/std",
    "fp-evm/std",
    "fp-rpc/std",
    "fp-self-contained/std",
	
	# Frontier FRAME
    "pallet-base-fee/std",
    "pallet-dynamic-fee/std",
    "pallet-ethereum/std",
    "pallet-evm-chain-id/std",
    "pallet-evm-precompile-dispatch/std",
    "pallet-evm-precompile-modexp/std",
    "pallet-evm-precompile-sha3fips/std",
    "pallet-evm-precompile-simple/std",
    "pallet-evm/std",
]

runtime-benchmarks = [
	"frame-benchmarking/runtime-benchmarks",
	"frame-support/runtime-benchmarks",
	"frame-system-benchmarking/runtime-benchmarks",
	"frame-system/runtime-benchmarks",
	"pallet-balances/runtime-benchmarks",
	"pallet-grandpa/runtime-benchmarks",
	"pallet-sudo/runtime-benchmarks",
	"pallet-template/runtime-benchmarks",
	"pallet-timestamp/runtime-benchmarks",
	"sp-runtime/runtime-benchmarks",
	"pallet-ethereum/runtime-benchmarks",
	"pallet-evm/runtime-benchmarks",
]

try-runtime = [
	"frame-executive/try-runtime",
	"frame-support/try-runtime",
	"frame-system/try-runtime",
	"frame-try-runtime/try-runtime",
	"pallet-balances/try-runtime",
	"pallet-grandpa/try-runtime",
	"pallet-sudo/try-runtime",
	"pallet-template/try-runtime",
	"pallet-timestamp/try-runtime",
	"pallet-transaction-payment/try-runtime",
	"sp-runtime/try-runtime",
]

# Enable the metadata hash generation.
#
# This is hidden behind a feature because it increases the compile time.
# The wasm binary needs to be compiled twice, once to fetch the metadata,
# generate the metadata hash and then a second time with the
# `RUNTIME_METADATA_HASH` environment variable set for the `CheckMetadataHash`
# extension.
metadata-hash = ["substrate-wasm-builder/metadata-hash"]

# A convenience feature for enabling things when doing a build
# for an on-chain release.
on-chain-release-build = ["metadata-hash", "sp-api/disable-logging"]
